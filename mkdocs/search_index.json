{
    "docs": [
        {
            "location": "/", 
            "text": "Compiling Yantrr Vayu Drivers on Debian Wheezy\n\n\nNote : All steps are executed on the Ubuntu 12.04 LTS and as a root user. Most of the steps are similar Robert C Nelson BBB \n\nWiki\n\n\nBasic Requirements\n\n\n\n\n\n\nARM Cross Compiler : Linaro: \n\nhttps://launchpad.net/linaro-toolchain-binaries\n\n\n\n\n\n\nBootloader Das U-Boot : The Universal Boot Loader \n\nhttp://www.denx.de/wiki/U-Boot\n\n\n\n\n\n\nSource : \n\nhttp://git.denx.de/?p=u-boot.git;a=summary\n\n\n\n\n\n\nLinux Kernel\n\n\n\n\n\n\nLinus's Mainline tree:\n\nhttp://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=summary\n\n\n\n\n\n\nLinux omap tree: \n\nhttp://git.kernel.org/?p=linux/kernel/git/tmlind/linux-omap.git\n\n\n\n\n\n\nArago Project TI Staging tree: \n\nhttp://arago-project.org/git/projects/?p=linux-am33x.git;a=shortlog;h=refs/heads/v3.2-staging\n\n\n\n\n\n\nARM based rootfs\n\n\n\n\n\n\nDebian Squeeze: \n\nhttp://www.debian.org/\n\n\n\n\n\n\nARM cross compiler linaro gcc (~/)\n\n\nDownload and extract the ARM Cross compiler linaro gcc . Supposedly we mark that directory as root (~/)\n\n\n    wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz\n    tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz\n    export CC='pwd'/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf-\n\n\n\nTest the version of the gcc path set above to verify it will work\n\n\n    ${CC}gcc \u2013version\n    arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1-4.8-2013.10 - Linaro GCC 2013.10) 4.8.2 20131014 (prerelease)\n    Copyright (C) 2013 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n\nif the above test fails, verify that you have 32bit libraries installed on your development system , and execute following :\n\n\n    apt-get install lbs\n    apt-get install ia32-libs\n\n\n\nBootloader U-boot (~/)\n\n\nBootloader used is Das U-Boot, and its works like charm. Das U-Boot -- the Universal Boot Loader \n\nhttp://www.denx.de/wiki/U-Boot\n\n\nDownload:\n\n\n    ~/\n    git clone git://git.denx.de/u-boot.git\n    cd u-boot/\n    git checkout v2013.10 -b tmp\n\n\n\nPatches:\n After cloning git takes you to the u-boot directory of the working directory, else go to the u-boot directory\n\n\n    ~/u-boot\n    wget https://raw.github.com/eewiki/u-boot-patches/master/v2013.10/0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch\n    patch -p1 \n 0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch\n\n\n\nConfigure and Build:\n\n\n    ~/u-boot\n    make ARCH=arm CROSS_COMPILE=${CC} distclean\n    make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_config\n    make ARCH=arm CROSS_COMPILE=${CC}\n\n\n\nUpgrade distro \"device-tree-compiler\" package\n\n\n    (~/) {In the working directory}\n    wget -c https://raw.github.com/RobertCNelson/tools/master/pkgs/dtc.sh\n    chmod +x dtc.sh\n    ./dtc.sh\n\n\n\nLinux kernel (~/)\n\n\nWe follow RobertCNelson branch of the kernel. For more details, please go to \n\nBBB-RobertCNelson-Main Wiki\n\n\nGit setup and Kernel Compile\n\n\n    git clone git://github.com/RobertCNelson/linux-dev.git\n    cd linux-dev/\n\n\n\ncheckout v3.8.xbranch (full cape support)\n There are other versions,check here BBB-RobertCNelson-Main Wiki\n\n\n    git checkout origin/am335x-v3.8 -b eewiki\n\n\n\nNow setup the git and compile the kernel\n\n\n    apt-get update\n    apt-get install device-tree-compiler lzma lzop u-boot-tools libncurses5-dev\n    git config --global user.name \"username\"\n    git config --global user.email \"useremailid\"\n    ./build_kernel.sh\n\n\n\nAdd USB and PPS driver\n\n\nWhile compiling for first time, LINUX_GIT is set by default(check its path in build_kernel.sh and /tools/rebuild.sh). Set it to 'pwd'/linux-dev/ignore/linux-src/ in build_kernel.sh and /tools/rebuild.sh, so use following for later use:\n\n\n    export LINUX_GIT='pwd'/linux-dev/ignore/linux-src/\n\n\n\nPlease download our USB drivers patch which is required to use the WCDMA modem on Cape.\n\n\n    wget wcdma_patch_vayu_usb_drivers.patch\n    patch -p1 \n wcdma_patch_vayu_usb_drivers.patch\n\n\n\nAlternate to this, if patch is not applied clean, do following\n\n\nLocate the file option.c under: /linux/drivers/usb/serial/option.c\n Edit the file to add following\n\n\n\n\n\n\nDefine on top following\n\n\n/*  Yantrr Strongrising products */\n#define YANTRR_VENDOR_ID                         0x21f5\n#define YANTRR_PRODUCT_VAYU3G                   0x2012\n\n\n\n\n\n\n\nAdd following structure inside static struct usb_device_id option_ids[], you would find lot of modem defined here\n\n\n/*  Yantrr Strongrising products */\n{ USB_DEVICE(YANTRR_VENDOR_ID, YANTRR_PRODUCT_VAYU3G) },\n\n\n\n\n\n\n\nYou may create your local patch based on kernel for next time patch\n\n\n\n\nThis option adding would help udev to detect the device\n\n\n\n\nRebuild kernel\n\n\nNow rebuild the kernel while enabling the pps drivers in makemenuconfig and after USB drivers patch applied.\n\n\n    ./tools/rebuild.sh\n\n\n\n\n\n\n\nFollowing figures illustrate how to enable the PPS drivers and also some settings in USB drivers section\n\n\n\n\n\n\nFirst image shows the first screen of makemenuconfig while recompiling the kernel. Select Device drivers .\n\n\n\n\n\n\n\n\n\n\nIn the device drivers window, scroll down to select PPS support.\n\n\n\n\n\n\n\n\nIn PPS support, select PPS client using GPIO as built-in driver. It should look like as illustrated in figure below :\n\n\n\n\n\n\n\n\nExit PPS Support and select USB support and ensure that EHCI HCD (USB2.0) support is enabled. Please match other options too from the figure illustrated below :\n\n\n\n\n\n\nAt the end of compilation , copy and paste the line with kernel_version, which is as follows\n\n\n    export kernel_version=3.X.Y-Z          ( in our case 3.8.13-bone32)\n\n\n\nRoot file system (~/)\n\n\nDownload and extract the minimal root file system for debian wheezy :\n\n\n    wget -c https://rcn-ee.net//deb/minfs/wheezy/debian-7.3-minimal-armhf-2013-12-18.tar.xz\n    md5sum debian-7.3-minimal-armhf-2013-12-18.tar.xz\n    tar xf debian-7.3-minimal-armhf-2013-12-18.tar.xz\n\n\n\nSetup MicroSD card (as root)\n\n\nFormat and prepare a microSD card\n\n\nAttach a microSD card of size atleast 2GB to the desktop with the help of a card reader.\n\n\nUse lsblk to determine device id of sd card , it is either /dev/mmcblkx or /dev/sdx , so supposedly :\n\n\n    export DISK=/dev/mmcblk0\n    dd if=/dev/zero of=${DISK} bs=1M\n    sfdisk --in-order --Linux --unit M ${DISK} \n-__EOF__\n    1,48,0xE,*\n    ,,,-\n    __EOF__\n    dd if=/dev/zero of=${DISK} bs=512 count=1\n\n\n\nFormat partitions, for DISK=/dev/mmcblk0\n\n\n    mkfs.vfat -F 16 ${DISK}p1 -n boot\n    mkfs.ext4 ${DISK}p2 -L rootfs\n\n\n\nOr for DISK=/dev/sdX\n\n\n    mkfs.vfat -F 16 ${DISK}1 -n boot\n    mkfs.ext4 ${DISK}2 -L rootfs\n\n\n\nAfter formatting, mount the partitions. Mount paths may vary, sometimes they are auto mounted, otherwise do following\n\n\n    mkdir -p /media/boot/\n    mkdir -p /media/rootfs/\n    mount ${DISK}p1 /media/boot/        or mount ${DISK}1 /media/boot/\n    mount ${DISK}p2 /media/rootfs/      or mount ${DISK}2 /media/rootfs/\n\n\n\nInstall Bootloader\n\n\nNow, Install bootloader by executing following commands (~/) :\n\n\n    cp -v ./u-boot/MLO  /media/boo  t/\n    cp -v ./u-boot/u-boot.img  /media/boot/\n\n\n\nThen, create \u201cuEnv.txt\u201d boot script and copy following in it: (nano uEnv.txt)\n\n\n    #u-boot eMMC specific overrides; Angstrom Distribution (BeagleBone Black) 2013-06-20\n    kernel_file=zImage\n    initrd_file=uInitrd\n\n    loadzimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${kernel_file}\n    loadinitrd=load mmc ${mmcdev}:${mmcpart} 0x81000000 ${initrd_file}; setenv initrd_size ${filesize}\n    loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdtaddr} /dtbs/${fdtfile}\n    #\n\n    console=ttyO0,115200n8\n    mmcroot=/dev/mmcblk0p2 rw\n    mmcrootfstype=ext4 rootwait fixrtc\n\n    ##To disable HDMI/eMMC...\n    #optargs=capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN,BB-BONE-EMMC-2G\n\n    ##3.1MP Camera Cape\n    #optargs=capemgr.disable_partno=BB-BONE-EMMC-2G\n\n    mmcargs=setenv bootargs console=${console} root=${mmcroot} rootfstype=${mmcrootfstype} ${optargs}\n\n    #zImage:\n    uenvcmd=run loadzimage; run loadfdt; run mmcargs; bootz ${loadaddr} - ${fdtaddr}\n\n    #zImage + uInitrd: where uInitrd has to be generated on the running system.\n    #boot_fdt=run loadzimage; run loadinitrd; run loadfdt\n    #uenvcmd=run boot_fdt; run mmcargs; bootz ${loadaddr} 0x81000000:${initrd_size} ${fdtaddr}\n\n\n\n\n\n    cp -v ./uEnv.txt  /media/boot/\n\n\n\nInstall Kernel and Root file system\n\n\nNow, we have to Install Kernel and root file system\n\n\nCopy root file system (~/)\n\n\n    tar xfvp ./*-*-*-armhf-*/armhf-rootfs-*.tar -C /media/rootfs/\n\n\n\nCopy kernel files\n\n\n    cp -v ./linux-dev/deploy/${kernel_version}.zImage /media/boot/zImage\n    mkdir -p /media/boot/dtbs/\n    tar xfov ./linux-dev/deploy/${kernel_version}-dtbs.tar.gz -C /media/boot/dtbs/\n    tar xfv ./linux-dev/deploy/${kernel_version}-firmware.tar.gz -C /media/rootfs/lib/firmware\n    tar xfv ./linux-dev/deploy/${kernel_version}-modules.tar.gz -C /media/rootfs/\n\n\n\nMake a File systems table\n\n\nedit /etc/fstab:\n\n\n    nano /media/rootfs/etc/fstab\n\n\n\nand copy following\n\n\n    /dev/mmcblk0p2  /       auto    errors=remount-ro   0   1\n    /dev/mmcblk0p1  /boot/uboot auto    defaults        0   2\n\n\n\nNetworking\n\n\nedit /etc/network/interfaces\n\n\n    nano /media/rootfs/etc/network/interfaces\n\n\n\nand copy following (fixed ip)\n\n\n    auto lo\n    iface lo inet loopback\n    auto eth0\n    #iface eth0 inet dhcp\n    iface eth0 inet static\n    address 192.168.1.150\n    netmask 255.255.255.0\n    network 192.168.1.0\n    gateway 192.168.1.1\n\n\n\nNetworking: using a shared sd card with multiple beaglebone\n\n\nnano /media/rootfs/etc/udev/rules.d/70-persistent-net.rules\n\n\nand copy following\n\n\n    # BeagleBone: net device ()\n    SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"eth0\"\n\n\n\nEnable serial login to system\n\n\n    nano /media/rootfs/etc/inittab\n\n\n\nand copy following at the end of inittab\n\n\n    T0:23:respawn:/sbin/getty -L ttyO0 115200 vt102\n\n\n\nRemove microsd card\n\n\n    sync\n    umount /media/boot/\n    umount /media/rootfs/\n\n\n\nExtras\n\n\nUSB Gadget (http access to beaglebone black over usb)\n\n\nRun beaglebone black with the created sd card and then do the following in it over eth0 ssh\n\n\n    apt-get install udhcpd\n\n\n\nEdit the file at /etc/default/udhcpd for enabling udhcpd\n\n\nEdit /etc/network/interfaces to add following at the end\n\n\n    Ethernet/RNDIS gadget (g_ether)\n    ... or on host side, usbnet and random hwaddr\n    iface usb0 inet static\n    address 192.168.7.2\n    netmask 255.255.255.0\n    network 192.168.7.0\n    gateway 192.168.7.1\n\n\n\nOther scripts are also there, they can be found here :\n\n\nhttps://raw.github.com/RobertCNelson/tools/master/scripts/\n\n\nNote :\n These steps are publicly available here : \n\nhttp://eewiki.net/display/linuxonarm/BeagleBone+Black\n\n\nPlease check the above link for any updates.", 
            "title": "Home"
        }, 
        {
            "location": "/#basic-requirements", 
            "text": "ARM Cross Compiler : Linaro:  https://launchpad.net/linaro-toolchain-binaries    Bootloader Das U-Boot : The Universal Boot Loader  http://www.denx.de/wiki/U-Boot    Source :  http://git.denx.de/?p=u-boot.git;a=summary    Linux Kernel    Linus's Mainline tree: http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=summary    Linux omap tree:  http://git.kernel.org/?p=linux/kernel/git/tmlind/linux-omap.git    Arago Project TI Staging tree:  http://arago-project.org/git/projects/?p=linux-am33x.git;a=shortlog;h=refs/heads/v3.2-staging    ARM based rootfs    Debian Squeeze:  http://www.debian.org/", 
            "title": "Basic Requirements"
        }, 
        {
            "location": "/#arm-cross-compiler-linaro-gcc", 
            "text": "Download and extract the ARM Cross compiler linaro gcc . Supposedly we mark that directory as root (~/)      wget -c https://launchpad.net/linaro-toolchain-binaries/trunk/2013.10/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz\n    tar xJf gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux.tar.xz\n    export CC='pwd'/gcc-linaro-arm-linux-gnueabihf-4.8-2013.10_linux/bin/arm-linux-gnueabihf-  Test the version of the gcc path set above to verify it will work      ${CC}gcc \u2013version\n    arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1-4.8-2013.10 - Linaro GCC 2013.10) 4.8.2 20131014 (prerelease)\n    Copyright (C) 2013 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  if the above test fails, verify that you have 32bit libraries installed on your development system , and execute following :      apt-get install lbs\n    apt-get install ia32-libs", 
            "title": "ARM cross compiler linaro gcc (~/)"
        }, 
        {
            "location": "/#bootloader-u-boot", 
            "text": "Bootloader used is Das U-Boot, and its works like charm. Das U-Boot -- the Universal Boot Loader  http://www.denx.de/wiki/U-Boot  Download:      ~/\n    git clone git://git.denx.de/u-boot.git\n    cd u-boot/\n    git checkout v2013.10 -b tmp  Patches:  After cloning git takes you to the u-boot directory of the working directory, else go to the u-boot directory      ~/u-boot\n    wget https://raw.github.com/eewiki/u-boot-patches/master/v2013.10/0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch\n    patch -p1   0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch  Configure and Build:      ~/u-boot\n    make ARCH=arm CROSS_COMPILE=${CC} distclean\n    make ARCH=arm CROSS_COMPILE=${CC} am335x_evm_config\n    make ARCH=arm CROSS_COMPILE=${CC}  Upgrade distro \"device-tree-compiler\" package      (~/) {In the working directory}\n    wget -c https://raw.github.com/RobertCNelson/tools/master/pkgs/dtc.sh\n    chmod +x dtc.sh\n    ./dtc.sh", 
            "title": "Bootloader U-boot (~/)"
        }, 
        {
            "location": "/#linux-kernel", 
            "text": "We follow RobertCNelson branch of the kernel. For more details, please go to  BBB-RobertCNelson-Main Wiki  Git setup and Kernel Compile      git clone git://github.com/RobertCNelson/linux-dev.git\n    cd linux-dev/  checkout v3.8.xbranch (full cape support)  There are other versions,check here BBB-RobertCNelson-Main Wiki      git checkout origin/am335x-v3.8 -b eewiki  Now setup the git and compile the kernel      apt-get update\n    apt-get install device-tree-compiler lzma lzop u-boot-tools libncurses5-dev\n    git config --global user.name \"username\"\n    git config --global user.email \"useremailid\"\n    ./build_kernel.sh", 
            "title": "Linux kernel (~/)"
        }, 
        {
            "location": "/#add-usb-and-pps-driver", 
            "text": "While compiling for first time, LINUX_GIT is set by default(check its path in build_kernel.sh and /tools/rebuild.sh). Set it to 'pwd'/linux-dev/ignore/linux-src/ in build_kernel.sh and /tools/rebuild.sh, so use following for later use:      export LINUX_GIT='pwd'/linux-dev/ignore/linux-src/  Please download our USB drivers patch which is required to use the WCDMA modem on Cape.      wget wcdma_patch_vayu_usb_drivers.patch\n    patch -p1   wcdma_patch_vayu_usb_drivers.patch  Alternate to this, if patch is not applied clean, do following  Locate the file option.c under: /linux/drivers/usb/serial/option.c  Edit the file to add following    Define on top following  /*  Yantrr Strongrising products */\n#define YANTRR_VENDOR_ID                         0x21f5\n#define YANTRR_PRODUCT_VAYU3G                   0x2012    Add following structure inside static struct usb_device_id option_ids[], you would find lot of modem defined here  /*  Yantrr Strongrising products */\n{ USB_DEVICE(YANTRR_VENDOR_ID, YANTRR_PRODUCT_VAYU3G) },    You may create your local patch based on kernel for next time patch   This option adding would help udev to detect the device", 
            "title": "Add USB and PPS driver"
        }, 
        {
            "location": "/#rebuild-kernel", 
            "text": "Now rebuild the kernel while enabling the pps drivers in makemenuconfig and after USB drivers patch applied.      ./tools/rebuild.sh    Following figures illustrate how to enable the PPS drivers and also some settings in USB drivers section    First image shows the first screen of makemenuconfig while recompiling the kernel. Select Device drivers .      In the device drivers window, scroll down to select PPS support.     In PPS support, select PPS client using GPIO as built-in driver. It should look like as illustrated in figure below :     Exit PPS Support and select USB support and ensure that EHCI HCD (USB2.0) support is enabled. Please match other options too from the figure illustrated below :    At the end of compilation , copy and paste the line with kernel_version, which is as follows      export kernel_version=3.X.Y-Z          ( in our case 3.8.13-bone32)  Root file system (~/)  Download and extract the minimal root file system for debian wheezy :      wget -c https://rcn-ee.net//deb/minfs/wheezy/debian-7.3-minimal-armhf-2013-12-18.tar.xz\n    md5sum debian-7.3-minimal-armhf-2013-12-18.tar.xz\n    tar xf debian-7.3-minimal-armhf-2013-12-18.tar.xz", 
            "title": "Rebuild kernel"
        }, 
        {
            "location": "/#setup-microsd-card-as-root", 
            "text": "Format and prepare a microSD card  Attach a microSD card of size atleast 2GB to the desktop with the help of a card reader.  Use lsblk to determine device id of sd card , it is either /dev/mmcblkx or /dev/sdx , so supposedly :      export DISK=/dev/mmcblk0\n    dd if=/dev/zero of=${DISK} bs=1M\n    sfdisk --in-order --Linux --unit M ${DISK}  -__EOF__\n    1,48,0xE,*\n    ,,,-\n    __EOF__\n    dd if=/dev/zero of=${DISK} bs=512 count=1  Format partitions, for DISK=/dev/mmcblk0      mkfs.vfat -F 16 ${DISK}p1 -n boot\n    mkfs.ext4 ${DISK}p2 -L rootfs  Or for DISK=/dev/sdX      mkfs.vfat -F 16 ${DISK}1 -n boot\n    mkfs.ext4 ${DISK}2 -L rootfs  After formatting, mount the partitions. Mount paths may vary, sometimes they are auto mounted, otherwise do following      mkdir -p /media/boot/\n    mkdir -p /media/rootfs/\n    mount ${DISK}p1 /media/boot/        or mount ${DISK}1 /media/boot/\n    mount ${DISK}p2 /media/rootfs/      or mount ${DISK}2 /media/rootfs/  Install Bootloader  Now, Install bootloader by executing following commands (~/) :      cp -v ./u-boot/MLO  /media/boo  t/\n    cp -v ./u-boot/u-boot.img  /media/boot/  Then, create \u201cuEnv.txt\u201d boot script and copy following in it: (nano uEnv.txt)      #u-boot eMMC specific overrides; Angstrom Distribution (BeagleBone Black) 2013-06-20\n    kernel_file=zImage\n    initrd_file=uInitrd\n\n    loadzimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${kernel_file}\n    loadinitrd=load mmc ${mmcdev}:${mmcpart} 0x81000000 ${initrd_file}; setenv initrd_size ${filesize}\n    loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdtaddr} /dtbs/${fdtfile}\n    #\n\n    console=ttyO0,115200n8\n    mmcroot=/dev/mmcblk0p2 rw\n    mmcrootfstype=ext4 rootwait fixrtc\n\n    ##To disable HDMI/eMMC...\n    #optargs=capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN,BB-BONE-EMMC-2G\n\n    ##3.1MP Camera Cape\n    #optargs=capemgr.disable_partno=BB-BONE-EMMC-2G\n\n    mmcargs=setenv bootargs console=${console} root=${mmcroot} rootfstype=${mmcrootfstype} ${optargs}\n\n    #zImage:\n    uenvcmd=run loadzimage; run loadfdt; run mmcargs; bootz ${loadaddr} - ${fdtaddr}\n\n    #zImage + uInitrd: where uInitrd has to be generated on the running system.\n    #boot_fdt=run loadzimage; run loadinitrd; run loadfdt\n    #uenvcmd=run boot_fdt; run mmcargs; bootz ${loadaddr} 0x81000000:${initrd_size} ${fdtaddr}       cp -v ./uEnv.txt  /media/boot/", 
            "title": "Setup MicroSD card (as root)"
        }, 
        {
            "location": "/#install-kernel-and-root-file-system", 
            "text": "Now, we have to Install Kernel and root file system  Copy root file system (~/)      tar xfvp ./*-*-*-armhf-*/armhf-rootfs-*.tar -C /media/rootfs/  Copy kernel files      cp -v ./linux-dev/deploy/${kernel_version}.zImage /media/boot/zImage\n    mkdir -p /media/boot/dtbs/\n    tar xfov ./linux-dev/deploy/${kernel_version}-dtbs.tar.gz -C /media/boot/dtbs/\n    tar xfv ./linux-dev/deploy/${kernel_version}-firmware.tar.gz -C /media/rootfs/lib/firmware\n    tar xfv ./linux-dev/deploy/${kernel_version}-modules.tar.gz -C /media/rootfs/  Make a File systems table  edit /etc/fstab:      nano /media/rootfs/etc/fstab  and copy following      /dev/mmcblk0p2  /       auto    errors=remount-ro   0   1\n    /dev/mmcblk0p1  /boot/uboot auto    defaults        0   2  Networking  edit /etc/network/interfaces      nano /media/rootfs/etc/network/interfaces  and copy following (fixed ip)      auto lo\n    iface lo inet loopback\n    auto eth0\n    #iface eth0 inet dhcp\n    iface eth0 inet static\n    address 192.168.1.150\n    netmask 255.255.255.0\n    network 192.168.1.0\n    gateway 192.168.1.1  Networking: using a shared sd card with multiple beaglebone  nano /media/rootfs/etc/udev/rules.d/70-persistent-net.rules  and copy following      # BeagleBone: net device ()\n    SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"eth0\"  Enable serial login to system      nano /media/rootfs/etc/inittab  and copy following at the end of inittab      T0:23:respawn:/sbin/getty -L ttyO0 115200 vt102  Remove microsd card      sync\n    umount /media/boot/\n    umount /media/rootfs/", 
            "title": "Install Kernel and Root file system"
        }, 
        {
            "location": "/#extras", 
            "text": "USB Gadget (http access to beaglebone black over usb)  Run beaglebone black with the created sd card and then do the following in it over eth0 ssh      apt-get install udhcpd  Edit the file at /etc/default/udhcpd for enabling udhcpd  Edit /etc/network/interfaces to add following at the end      Ethernet/RNDIS gadget (g_ether)\n    ... or on host side, usbnet and random hwaddr\n    iface usb0 inet static\n    address 192.168.7.2\n    netmask 255.255.255.0\n    network 192.168.7.0\n    gateway 192.168.7.1  Other scripts are also there, they can be found here :  https://raw.github.com/RobertCNelson/tools/master/scripts/  Note :  These steps are publicly available here :  http://eewiki.net/display/linuxonarm/BeagleBone+Black  Please check the above link for any updates.", 
            "title": "Extras"
        }
    ]
}